rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Base rules
    match /{document=**} {
      allow read, write: if false; // Default deny all
    }
    
    // User profile rules
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Friends collection rules
      match /friends/{friendId} {
        // Allow users to read and manage their own friends list
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Tour rules
    match /tours/{tourId} {
      allow read: if request.auth != null && (
        resource.data.createdBy == request.auth.uid || 
        request.auth.uid in resource.data.players
      );
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }
    
    // Course rules
    match /courses/{courseId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }
    
    // Round rules (including quick games)
    match /rounds/{roundId} {
      // Allow reading a specific round document
      allow read: if request.auth != null && (
        resource.data.createdBy == request.auth.uid || 
        request.auth.uid in resource.data.players ||
        (resource.data.tourId != null && 
          request.auth.uid in get(/databases/$(database)/documents/tours/$(resource.data.tourId)).data.players)
      );
      
      // Allow listing all rounds (for queries)
      allow list: if request.auth != null && (
        // Allow listing quick games created by or involving the user
        (request.query.limit <= 100 && 
         (request.query.filters.size() == 3 || request.query.filters.size() == 2) &&
         (('createdBy' in request.query.filters && request.query.filters.createdBy == request.auth.uid) ||
          ('players' in request.query.filters && request.query.filters.players == request.auth.uid)))
      );
      
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        resource.data.createdBy == request.auth.uid ||
        (resource.data.isQuickGame == true && request.auth.uid in resource.data.players)
      );
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }
    
    // Score rules
    match /scores/{scoreId} {
      // Allow reading a specific score document
      allow read: if request.auth != null && exists(/databases/$(database)/documents/rounds/$(resource.data.roundId)) && (
        get(/databases/$(database)/documents/rounds/$(resource.data.roundId)).data.createdBy == request.auth.uid ||
        request.auth.uid in get(/databases/$(database)/documents/rounds/$(resource.data.roundId)).data.players ||
        (get(/databases/$(database)/documents/rounds/$(resource.data.roundId)).data.tourId != null && 
          request.auth.uid in get(/databases/$(database)/documents/tours/$(get(/databases/$(database)/documents/rounds/$(resource.data.roundId)).data.tourId)).data.players)
      );
      
      // Allow listing scores by player ID
      allow list: if request.auth != null && (
        request.query.limit <= 100 && 
        request.query.filters.size() == 1 && 
        'playerId' in request.query.filters && 
        request.query.filters.playerId == request.auth.uid
      );
      
      allow create: if request.auth != null && exists(/databases/$(database)/documents/rounds/$(request.resource.data.roundId)) && (
        get(/databases/$(database)/documents/rounds/$(request.resource.data.roundId)).data.createdBy == request.auth.uid ||
        (request.resource.data.playerId == request.auth.uid && 
          request.auth.uid in get(/databases/$(database)/documents/rounds/$(request.resource.data.roundId)).data.players)
      );
      allow update: if request.auth != null && (
        resource.data.submittedBy == request.auth.uid ||
        get(/databases/$(database)/documents/rounds/$(resource.data.roundId)).data.createdBy == request.auth.uid ||
        (resource.data.playerId == request.auth.uid && 
          request.auth.uid in get(/databases/$(database)/documents/rounds/$(resource.data.roundId)).data.players)
      );
      allow delete: if request.auth != null && (
        resource.data.submittedBy == request.auth.uid ||
        get(/databases/$(database)/documents/rounds/$(resource.data.roundId)).data.createdBy == request.auth.uid
      );
    }
  }
} 